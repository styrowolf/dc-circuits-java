/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dc.circuits;

import java.lang.Math;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        ParallelConnection pc = new ParallelConnection(
            new CircuitElement[] {
                new Circuit(new CircuitElement[] {
                    new Resistor(6),
                    new IdealAmmeter(),
                    new Resistor(2),
                }, 0),
                new Circuit(new CircuitElement[] {
                    new Resistor(2),
                    new IdealAmmeter(),
                }, 0),
                new Circuit(new CircuitElement[] {
                    new Resistor(4),
                    new IdealAmmeter(),
                }, 0),
                new Circuit(new CircuitElement[] {
                    new IdealVoltmeter(),
                }, 0),
            }
        );
        Circuit mc = new Circuit(
            new CircuitElement[] {
                pc,
                new Resistor(2),
            }, 22
        );
        mc.calculate();
        System.out.println(mc.voltage());
        System.out.println(mc.current());
        System.out.println(mc.resistance());
        System.out.println(mc.display());
    }
}

abstract class CircuitElement {
    double incoming_voltage;
    double resistance;
    double current; 
    boolean is_init;
    
    public void set_voltage(double v) {
        this.incoming_voltage = v;
    }

    public void set_current(double i) {
        this.current = i;
    }

    public void set_resistance(double r) {
        this.resistance = r;
    }

    public abstract void calculate();
    public abstract double voltage();
    public abstract double current();
    public abstract double resistance();

    public abstract String name();
    public abstract String display();
}

// the incoming_voltage field is assumed as initialized to the correct value
class Circuit extends CircuitElement {
    CircuitElement[] elements;

    public Circuit(CircuitElement[] e, double v) {
        this.incoming_voltage = v;
        this.is_init = false;
        this.elements = e;
    }
    // always call calculate on main circuit before accessing the fields
    public void calculate() {
        this.calculate_resistance();
        this.set_current(this.voltage() / this.resistance());
        is_init = true;
        for (int i = 0; i < this.elements.length; i++) {
            this.elements[i].set_current(this.current());
            if (this.elements.length == 1) {
                this.elements[i].set_voltage(this.voltage());
            } else {
                this.elements[i].set_voltage(this.elements[i].resistance() * this.current());
            }
            this.elements[i].calculate();
        }
    }

    public double voltage() {
        return this.incoming_voltage;
    }

    public double current() {
        if (!is_init) {
            this.calculate();
        }
        return this.current;
    }
    
    public double resistance() {
        if (!is_init) {
            this.calculate_resistance();
        }
        return this.resistance;
    }

    public void calculate_resistance() {
        double r = 0;
        for (int i = 0; i < this.elements.length; i++) {
            r += elements[i].resistance();
        }
        this.set_resistance(r);
    }

    public String name() {
        return "Circuit";
    }

    public String display() {
        String s = new String();
        s += this.name() + " {\n";
        s += "incoming voltage: " + this.voltage() + "\n";
        s += "current: " + this.current() + "\n";
        s += "resistance: " + this.resistance() + "\n";
        s += "elements:\n";
        for (int i = 0; i < this.elements.length; i++) {
            s += this.elements[i].display();
        }
        s += "}\n";
        return s;
    }
}

// the incoming_voltage field is assumed as initialized to the correct value
class ParallelConnection extends CircuitElement {
    CircuitElement[] circuits;

    public ParallelConnection(CircuitElement[] c) {
        this.is_init = false;
        this.circuits = c;
    }

    public double resistance() {
        if (!is_init) {
            double r = 0;
            for (int i = 0; i < this.circuits.length; i++) {
                r += 1 / this.circuits[i].resistance();
            }
            this.resistance = Math.pow(r, -1);
        }
        return this.resistance;
    }

    public double voltage() {
        return this.incoming_voltage;
    }

    public double current() {
        if (!is_init) {
            this.calculate();
        }
        return this.current;
    }

    public void calculate() {
        for (int i = 0; i < this.circuits.length; i++) {
            this.circuits[i].set_voltage(this.voltage());
            this.circuits[i].set_current(this.voltage() / this.circuits[i].resistance);
            this.circuits[i].calculate();
        }
        is_init = true;
    }

    public String name() {
        return "ParallelConnection";
    }

    public String display() {
        String s = new String();
        s += this.name() + " {\n";
        s += "incoming voltage: " + this.voltage() + "\n";
        s += "current: " + this.current() + "\n";
        s += "resistance: " + this.resistance() + "\n";
        s += "circuits:\n";
        for (int i = 0; i < this.circuits.length; i++) {
            s += this.circuits[i].display();
        }
        s += "}\n";
        return s;
    }
}

class Resistor extends CircuitElement {
    public Resistor(double r) {
        this.resistance = r;
    }

    public void calculate() {}

    public double voltage() {
        return this.incoming_voltage;
    }

    public double current() {
        return this.current;
    }

    public double resistance() {
        return this.resistance;
    }

    public String name() {
        return "Resistor";
    }

    public String display() {
        String s = new String();
        s += this.name() + " {\n";
        s += "incoming voltage: " + this.voltage() + "\n";
        s += "current: " + this.current() + "\n";
        s += "resistance: " + this.resistance() + "\n";
        s += "}\n";
        return s;
    }
}

class IdealAmmeter extends CircuitElement {
    public IdealAmmeter() {
        this.resistance = 0;
    }

    public void calculate() {}

    public double voltage() {
        return this.incoming_voltage;
    }

    public double current() {
        return this.current;
    }

    public double resistance() {
        return this.resistance;
    }

    public String name() {
        return "IdealAmmeter";
    }

    public String display() {
        String s = new String();
        s += this.name() + " {\n";
        s += "incoming voltage: " + this.voltage() + "\n";
        s += "current: " + this.current() + "\n";
        s += "resistance: " + this.resistance() + "\n";
        s += "}\n";
        return s;
    }
}

class IdealVoltmeter extends CircuitElement {
    public IdealVoltmeter() {
        this.resistance = Double.POSITIVE_INFINITY;
    }

    public void calculate() {}

    public double voltage() {
        return this.incoming_voltage;
    }

    public double current() {
        return this.current;
    }

    public double resistance() {
        return this.resistance;
    }

    public String name() {
        return "IdealVoltmeter";
    }

    public String display() {
        String s = new String();
        s += this.name() + " {\n";
        s += "incoming voltage: " + this.voltage() + "\n";
        s += "current: " + this.current() + "\n";
        s += "resistance: " + this.resistance() + "\n";
        s += "}\n";
        return s;
    }
}